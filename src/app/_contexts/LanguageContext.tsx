"use client";
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export const languages = {
  en: {
    code: 'en',
    name: 'English',
    flag: 'üá∫üá∏',
    nativeName: 'English'
  },
  ua: {
    code: 'ua',
    name: 'Ukrainian',
    flag: 'üá∫üá¶',
    nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
  },
  fr: {
    code: 'fr',
    name: 'French',
    flag: 'üá´üá∑',
    nativeName: 'Fran√ßais'
  },
} as const;

export type LanguageCode = keyof typeof languages;

interface LanguageContextType {
  currentLanguage: LanguageCode;
  setLanguage: (language: LanguageCode) => void;
  t: (key: string) => string;
  availableLanguages: typeof languages;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations = {
  en: {
    'settings.title': 'Settings',
    'settings.subtitle': 'Manage your account preferences and application settings',
    'settings.general': 'General Settings',
    'settings.language': 'Language',
    'settings.language.subtitle': 'Select your preferred language',
    'settings.theme': 'Theme',
    'settings.theme.subtitle': 'Choose your preferred theme',
    'settings.notifications': 'Notifications',
    'settings.notifications.subtitle': 'Manage your notification preferences',
    'settings.emailNotifications': 'Email Notifications',
    'settings.emailNotifications.subtitle': 'Receive email notifications about important updates',
    'settings.managerMode': 'Manager Mode',
    'settings.managerMode.subtitle': 'Enable advanced management features',
    'settings.googleAds': 'Google Ads Integration',
    'settings.googleAds.subtitle': 'Connect your Google Ads account',
    'settings.save': 'Save Settings',
    'settings.saved': 'Settings saved successfully!',
    
    'common.save': 'Save',
    'common.cancel': 'Cancel',
    'common.loading': 'Loading...',
    'common.error': 'Error',
    'common.success': 'Success',
  },
  ua: {
    'settings.title': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
    'settings.subtitle': '–ö–µ—Ä—É–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∏',
    'settings.general': '–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
    'settings.language': '–ú–æ–≤–∞',
    'settings.language.subtitle': '–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –º–æ–≤—É',
    'settings.theme': '–¢–µ–º–∞',
    'settings.theme.subtitle': '–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ç–µ–º—É',
    'settings.notifications': '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
    'settings.notifications.subtitle': '–ö–µ—Ä—É–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å',
    'settings.emailNotifications': 'Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
    'settings.emailNotifications.subtitle': '–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
    'settings.managerMode': '–†–µ–∂–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
    'settings.managerMode.subtitle': '–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è',
    'settings.googleAds': '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è Google Ads',
    'settings.googleAds.subtitle': '–ü—ñ–¥–∫–ª—é—á—ñ—Ç—å —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å Google Ads',
    'settings.save': '–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
    'settings.saved': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
    
    'common.save': '–ó–±–µ—Ä–µ–≥—Ç–∏',
    'common.cancel': '–°–∫–∞—Å—É–≤–∞—Ç–∏',
    'common.loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
    'common.error': '–ü–æ–º–∏–ª–∫–∞',
    'common.success': '–£—Å–ø—ñ—Ö',
  },
  fr: {
    'settings.title': 'Param√®tres',
    'settings.subtitle': 'G√©rez vos pr√©f√©rences de compte et param√®tres d\'application',
    'settings.general': 'Param√®tres G√©n√©raux',
    'settings.language': 'Langue',
    'settings.language.subtitle': 'S√©lectionnez votre langue pr√©f√©r√©e',
    'settings.theme': 'Th√®me',
    'settings.theme.subtitle': 'Choisissez votre th√®me pr√©f√©r√©',
    'settings.notifications': 'Notifications',
    'settings.notifications.subtitle': 'G√©rez vos pr√©f√©rences de notification',
    'settings.emailNotifications': 'Notifications Email',
    'settings.emailNotifications.subtitle': 'Recevoir des notifications email sur les mises √† jour importantes',
    'settings.managerMode': 'Mode Manager',
    'settings.managerMode.subtitle': 'Activer les fonctionnalit√©s avanc√©es de gestion',
    'settings.googleAds': 'Int√©gration Google Ads',
    'settings.googleAds.subtitle': 'Connectez votre compte Google Ads',
    'settings.save': 'Enregistrer les Param√®tres',
    'settings.saved': 'Param√®tres enregistr√©s avec succ√®s !',
    
    'common.save': 'Enregistrer',
    'common.cancel': 'Annuler',
    'common.loading': 'Chargement...',
    'common.error': 'Erreur',
    'common.success': 'Succ√®s',
  },
} as const;

interface LanguageProviderProps {
  children: ReactNode;
}

export function LanguageProvider({ children }: LanguageProviderProps) {
  const [currentLanguage, setCurrentLanguage] = useState<LanguageCode>('en');

  useEffect(() => {
    const savedLanguage = localStorage.getItem('preferred-language') as LanguageCode;
    if (savedLanguage && languages[savedLanguage]) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  const handleSetLanguage = (language: LanguageCode) => {
    setCurrentLanguage(language);
    localStorage.setItem('preferred-language', language);
    
    document.documentElement.lang = language;
    
    window.dispatchEvent(new CustomEvent('languageChanged', { 
      detail: { language } 
    }));
  };

  const t = (key: string): string => {
    const currentTranslations = translations[currentLanguage];
    return currentTranslations[key as keyof typeof currentTranslations] || key;
  };

  const value: LanguageContextType = {
    currentLanguage,
    setLanguage: handleSetLanguage,
    t,
    availableLanguages: languages,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}
